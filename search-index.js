var searchIndex = new Map(JSON.parse('[\
["mistralrs",{"doc":"","t":"FPPGPNNNNNNNNHNNNNNNNNNNNNNNNHNNNNNNOHOOOCOONNNNNNNNNNNNOOOOOOOOOOFFPPPPGNNNNNNNNNNNNOHHNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONNNOONNNOOONNNNNNNNNNNN","n":["Args","Mistral","MistralGGUF","ModelSelected","XLoraMistral","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","chatcompletions","command","command_for_update","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","get_router","group_id","has_subcommand","init","init","into","into","log","main","max_seqs","model","no_xlora_kv_cache","openai","port","truncate_sequence","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","model_id","model_id","order","quantized_filename","quantized_model_id","repeat_last_n","repeat_last_n","repeat_last_n","tok_model_id","xlora_model_id","ChatCompletionRequest","Message","Multi","MultiId","Single","SingleId","StopTokens","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","content","default_1usize","default_false","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","from_ref","from_ref","from_ref","init","init","init","into","into","into","logit_bias","logprobs","max_tokens","messages","model","n_choices","name","presence_penalty","repetition_penalty","role","serialize","serialize","serialize","stop_seqs","temperature","to_owned","to_owned","to_owned","top_k","top_logprobs","top_p","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"mistralrs"],[56,"mistralrs::ModelSelected"],[66,"mistralrs::openai"],[148,"clap_builder::builder::command"],[149,"mistralrs_core"],[150,"alloc::sync"],[151,"mistralrs_core::pipeline"],[152,"axum::extract::state"],[153,"axum::json"],[154,"alloc::string"],[155,"core::fmt"],[156,"core::fmt"],[157,"clap_builder"],[158,"core::result"],[159,"axum::routing"],[160,"clap_builder::util::id"],[161,"core::option"],[162,"anyhow"],[163,"core::any"],[164,"serde::de"],[165,"serde::ser"]],"d":["","Select the mistral instruct model.","Select the quantized mistral instruct model with gguf.","","Select the mistral instruct model, with X-LoRA.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Log all responses and requests to this file","","Maximum running sequences at any time","Model","Use no KV cache for X-LoRA, only applicable for X-LoRA …","","Port to serve on.","If a sequence is larger than the maximum model length, …","","","","","","","","","","","","","Model ID to load from","Model ID to load from","Ordering JSON file","Quantized filename, only applicable if <code>quantized</code> is set.","Quantized model ID to find the <code>quantized_filename</code>, only …","Control the application of repeat penalty for the last n …","Control the application of repeat penalty for the last n …","Control the application of repeat penalty for the last n …","Model ID to load the tokenizer from","Model ID to load Xlora from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,11,11,0,11,17,17,11,11,11,17,11,17,0,17,17,11,17,11,17,11,17,11,11,17,11,17,11,17,0,17,11,11,17,11,17,17,0,17,17,17,0,17,17,11,17,11,17,11,17,11,17,11,17,11,17,29,30,30,31,31,29,31,30,31,30,0,0,26,26,26,26,0,25,26,7,25,26,7,25,26,7,25,26,7,25,0,0,25,26,7,25,26,7,25,26,7,25,26,7,25,26,7,25,26,7,25,26,7,25,26,7,25,26,7,7,7,7,7,7,7,25,7,7,25,25,26,7,7,7,25,26,7,7,7,7,25,26,7,25,26,7,25,26,7,25,26,7],"f":[0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[[5,[[3,[2]],[3,[4]]]]]],[8,[7]]],9],[[],1],[[],1],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,5],[10,5],[[11,12],13],[-1,-1,[]],[-1,-1,[]],[14,[[16,[11,15]]]],[14,[[16,[17,15]]]],[14,[[16,[11,15]]]],[14,[[16,[17,15]]]],[[[5,[[3,[2]],[3,[4]]]]],18],[[],[[20,[19]]]],[21,22],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[23,[5]]]],0,0,0,0,0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[[11,14],[[16,[5,15]]]],[[17,14],[[16,[5,15]]]],[[11,14],[[16,[5,15]]]],[[17,14],[[16,[5,15]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[26,26],[7,7],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[],10],[[],22],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[-1,[[16,[25]]],27],[-1,[[16,[26]]],27],[-1,[[16,[7]]],27],[10,5],[10,5],[10,5],[[25,12],13],[[26,12],13],[[7,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[25,-1],16,28],[[26,-1],16,28],[[7,-1],16,28],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Command",148],[5,"MistralRs",149],[5,"Arc",150],[10,"Conversation",151],[1,"tuple"],[5,"State",152],[5,"ChatCompletionRequest",66],[5,"Json",153],[5,"String",154],[1,"usize"],[6,"ModelSelected",0],[5,"Formatter",155],[8,"Result",155],[5,"ArgMatches",156],[8,"Error",157],[6,"Result",158],[5,"Args",0],[5,"Router",159],[5,"Id",160],[6,"Option",161],[1,"str"],[1,"bool"],[8,"Result",162],[5,"TypeId",163],[5,"Message",66],[6,"StopTokens",66],[10,"Deserializer",164],[10,"Serializer",165],[15,"Mistral",56],[15,"XLoraMistral",56],[15,"MistralGGUF",56]],"b":[]}],\
["mistralrs_core",{"doc":"","t":"PFKPPPPPKFFFGPPPPFGFGPGGPMNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNQQMNNNNNNNNNNNNNNNNNNNNNNNNNNNQMNQQONNNNNNNNNNNNNNNNNNNNNNNNONNONNOOOOOOOONOOONNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNN","n":["CacheToken","ChatCompletionResponse","Conversation","Done","EnvVar","Error","Fixed","Ids","Loader","MistralLoader","MistralRs","MistralSpecificConfig","ModelKind","Normal","Path","QuantizedGGML","QuantizedGGUF","Request","Response","SamplingParams","SchedulerMethod","Seqs","StopTokens","TokenSource","XLoraNormal","_setup_model","_setup_model","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","choices","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","created","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut_refcell","deref_refcell","download_model","download_model","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_mut_arcmutex","get_prompt","get_sender","handle_seq_error","handle_seq_error_stateaware","id","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","load_model","load_model","max_len","maybe_log_request","maybe_log_response","model","new","new","object","presence_penalty","prompt","repeat_last_n","repeat_penalty","response","return_logprobs","sampling_params","serialize","stop_toks","system_fingerprint","temperature","to_owned","to_owned","to_owned","to_owned","top_k","top_n_logprobs","top_p","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","usage","use_flash_attn","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"mistralrs_core"],[212,"candle_core::dtype"],[213,"core::option"],[214,"candle_core::device"],[215,"std::sync::mutex"],[216,"alloc::boxed"],[217,"alloc::sync"],[218,"anyhow"],[219,"alloc::string"],[220,"core::fmt"],[221,"core::fmt"],[222,"alloc::vec"],[223,"std::sync::mpsc"],[224,"mistralrs_lora"],[225,"core::result"],[226,"serde::ser"],[227,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If <code>revision</code> is None, then it defaults to <code>main</code>. If <code>dtype</code> is …","If <code>revision</code> is None, then it defaults to <code>main</code>. If <code>dtype</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[18,0,0,33,18,33,29,14,0,0,0,0,0,27,18,27,27,0,0,0,0,14,0,0,27,1,11,11,18,27,19,33,29,25,12,13,14,15,11,18,27,19,33,29,25,12,13,14,15,13,12,13,14,15,12,13,14,15,13,11,18,27,19,33,29,25,12,13,14,15,11,18,27,19,33,29,25,12,13,14,15,0,0,1,11,11,18,27,19,33,29,25,12,13,14,15,19,13,14,15,11,18,27,19,33,29,25,12,13,14,15,0,7,25,0,0,13,11,18,27,19,33,29,25,12,13,14,15,11,18,27,19,33,29,25,12,13,14,15,1,1,15,25,25,13,11,25,13,15,19,12,15,19,19,19,13,15,13,15,12,13,14,15,15,15,15,11,18,27,19,33,29,25,12,13,14,15,11,18,27,19,33,29,25,12,13,14,15,11,18,27,19,33,29,25,12,13,14,15,13,12,11,18,27,19,33,29,25,12,13,14,15],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[12,12],[13,13],[14,14],[15,15],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],0,0,[[1,[3,[17]],18],[[10,[[6,[0]]]]]],[[11,[3,[17]],18],[[10,[[6,[0]]]]]],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[16,9],[[19,20],21],[[13,20],21],[[14,20],21],[[15,20],21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[7,[23,[[22,[17,17]]]],24],[[10,[17,17]]]],[25,[[26,[19]]]],0,0,0,[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[3,[17]],18,[3,[2]],4],[[10,[[9,[[6,[[5,[0]]]],[8,[7]]]]]]]],[[1,[3,[17]],18,[3,[2]],4],[[10,[[9,[[6,[[5,[0]]]],[8,[7]]]]]]]],0,[[[8,[25]],17],9],[[[8,[25]],13],9],0,[[17,12,[3,[17]],[3,[17]],[3,[17]],27,[3,[28]],24],11],[[[6,[[5,[0]]]],29,[3,[17]],24],[[8,[25]]]],0,0,0,0,0,0,0,0,[[13,-1],30,31],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[10,"Loader",0],[6,"DType",212],[6,"Option",213],[6,"Device",214],[5,"Mutex",215],[5,"Box",216],[10,"Conversation",0],[5,"Arc",217],[1,"tuple"],[8,"Result",218],[5,"MistralLoader",0],[5,"MistralSpecificConfig",0],[5,"ChatCompletionResponse",0],[6,"StopTokens",0],[5,"SamplingParams",0],[1,"usize"],[5,"String",219],[6,"TokenSource",0],[5,"Request",0],[5,"Formatter",220],[8,"Result",220],[5,"HashMap",221],[5,"Vec",222],[1,"bool"],[5,"MistralRs",0],[5,"Sender",223],[6,"ModelKind",0],[5,"Ordering",224],[6,"SchedulerMethod",0],[6,"Result",225],[10,"Serializer",226],[5,"TypeId",227],[6,"Response",0]],"b":[]}],\
["mistralrs_lora",{"doc":"","t":"KFFOMNNNNNNNNNNNNNNNNNNNNNNNNOHHMNMNNNNNNNNNNM","n":["LinearLayerLike","LoraConfig","Ordering","adapters","bias","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","layers","linear","linear_no_bias","lora_forward","new","shape","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","weight"],"q":[[0,"mistralrs_lora"],[46,"candle_core::tensor"],[47,"core::option"],[48,"core::result"],[49,"serde::de"],[50,"core::fmt"],[51,"core::fmt"],[52,"alloc::string"],[53,"alloc::vec"],[54,"alloc::sync"],[55,"candle_core::error"],[56,"std::collections::hash::set"],[57,"candle_core::shape"],[58,"core::any"]],"d":["Any layer that is linear-like.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,4,1,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,0,0,1,5,1,4,5,4,5,4,5,4,5,4,5,1],"f":[0,0,0,0,[1,[[3,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[5,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[8,[4]]],9],[-1,[[8,[5]]],9],[7,6],[7,6],[[4,10],11],[[5,10],11],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],0,[[7,7,12,[14,[[6,[13,5]]]],7,4],[[16,[[15,[1]]]]]],[[7,7,12,[14,[[6,[13,5]]]],7,4],[[16,[[15,[1]]]]]],[[1,2,2,17],[[16,[2]]]],[[7,17,[3,[18]],[19,[13]]],5],[1,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2]],"c":[],"p":[[10,"LinearLayerLike",0],[5,"Tensor",46],[6,"Option",47],[5,"Ordering",0],[5,"LoraConfig",0],[1,"tuple"],[1,"usize"],[6,"Result",48],[10,"Deserializer",49],[5,"Formatter",50],[8,"Result",50],[8,"VarBuilder",51],[5,"String",52],[5,"Vec",53],[5,"Arc",54],[8,"Result",55],[1,"f64"],[1,"f32"],[5,"HashSet",56],[5,"Shape",57],[5,"TypeId",58]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
