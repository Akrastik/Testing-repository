var searchIndex = new Map(JSON.parse('[\
["mistralrs",{"doc":"","t":"FNNNNNNNNNNNNHNNNHOHNNNNNN","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","from","from_arg_matches","from_arg_matches_mut","get_router","group_id","init","into","main","port","root","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip"],"q":[[0,"mistralrs"],[26,"clap_builder::builder::command"],[27,"clap_builder::parser::matches::arg_matches"],[28,"clap_builder"],[29,"core::result"],[30,"axum::routing"],[31,"clap_builder::util::id"],[32,"core::option"],[33,"anyhow"],[34,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","Port to serve on.","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,0,5,0,5,5,5,5,5,5],"f":[0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],1],[2,-1,[]],[2,-1,[]],[2,3],[-1,-1,[]],[4,[[7,[5,6]]]],[4,[[7,[5,6]]]],[[],8],[[],[[10,[9]]]],[[],2],[-1,-2,[],[]],[[],[[11,[3]]]],0,[[],12],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,13,[]],[[5,4],[[7,[3,6]]]],[[5,4],[[7,[3,6]]]],[-1,-2,[],[]]],"c":[],"p":[[5,"Command",26],[1,"usize"],[1,"tuple"],[5,"ArgMatches",27],[5,"Args",0],[8,"Error",28],[6,"Result",29],[5,"Router",30],[5,"Id",31],[6,"Option",32],[8,"Result",33],[1,"str"],[5,"TypeId",34]],"b":[]}],\
["mistralrs_core",{"doc":"","t":"PPKFFFPGMNNNNNNNNNNNNNNNNNNNQQMNNNNNNNNNQNQQNNNNNNNNNNNNONNNNNNNNNNNNNONNNN","n":["CacheToken","EnvVar","Loader","MistralLoader","MistralRs","MistralSpecificConfig","Path","TokenSource","_setup_model","_setup_model","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut_refcell","deref_refcell","download_model","download_model","drop","drop","drop","drop","from","from","from","from","get_mut_arcmutex","get_sender","handle_seq_error","handle_seq_error_stateaware","init","init","init","init","into","into","into","into","load_model","load_model","new","new","repeat_last_n","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","use_flash_attn","vzip","vzip","vzip","vzip"],"q":[[0,"mistralrs_core"],[75,"candle_core::dtype"],[76,"core::option"],[77,"candle_core::device"],[78,"std::sync::mutex"],[79,"alloc::boxed"],[80,"anyhow"],[81,"alloc::string"],[82,"std::sync::mpsc"],[83,"alloc::sync"],[84,"core::result"],[85,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If <code>revision</code> is None, then it defaults to <code>main</code>. If <code>dtype</code> is …","If <code>revision</code> is None, then it defaults to <code>main</code>. If <code>dtype</code> is …","","","","","","","","","","","","","","","","","","","","",""],"i":[13,13,0,0,0,0,13,0,1,8,8,13,14,9,8,13,14,9,9,9,8,13,14,9,8,13,14,9,0,0,1,8,8,13,14,9,8,13,14,9,0,14,0,0,8,13,14,9,8,13,14,9,1,1,8,14,9,9,8,13,14,9,8,13,14,9,8,13,14,9,9,8,13,14,9],"f":[0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[[-1,-2],10,[],[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],0,0,[[1,[3,[12]],13],[[7,[[6,[0]]]]]],[[8,[3,[12]],13],[[7,[[6,[0]]]]]],[11,10],[11,10],[11,10],[11,10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[14,[[15,[0]]]],0,0,[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[3,[12]],13,[3,[2]],4],[[7,[[6,[[5,[0]]]]]]]],[[1,[3,[12]],13,[3,[2]],4],[[7,[[6,[[5,[0]]]]]]]],[[12,9,[3,[2]]],8],[[[6,[[5,[0]]]]],[[16,[14]]]],0,[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[10,"Loader",0],[6,"DType",75],[6,"Option",76],[6,"Device",77],[5,"Mutex",78],[5,"Box",79],[8,"Result",80],[5,"MistralLoader",0],[5,"MistralSpecificConfig",0],[1,"tuple"],[1,"usize"],[5,"String",81],[6,"TokenSource",0],[5,"MistralRs",0],[5,"Sender",82],[5,"Arc",83],[6,"Result",84],[5,"TypeId",85]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
