var searchIndex = new Map(JSON.parse('[\
["mistralrs",{"doc":"","t":"FFNNNNNNNNNNNNNNNNNNNNNNHNNNNNOHOOHONNNNNNNNNNN","n":["Args","RawRequest","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","from","from","from_arg_matches","from_arg_matches_mut","from_ref","get_router","group_id","init","init","into","into","log","main","port","prompt","root","sampling_params","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip"],"q":[[0,"mistralrs"],[47,"clap_builder::builder::command"],[48,"core::result"],[49,"serde::de"],[50,"clap_builder::parser::matches::arg_matches"],[51,"clap_builder"],[52,"mistralrs_core"],[53,"alloc::sync"],[54,"axum::routing"],[55,"clap_builder::util::id"],[56,"core::option"],[57,"anyhow"],[58,"axum::extract::state"],[59,"axum::json"],[60,"alloc::string"],[61,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Log all responses and requests to responses.log","","Port to serve on.","","","","","","","","","","","","","",""],"i":[0,0,8,8,8,2,8,2,2,2,8,8,8,2,8,2,2,8,2,8,2,8,8,2,0,8,8,2,8,2,8,0,8,2,0,2,2,8,2,8,2,8,2,8,8,8,2],"f":[0,0,[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[],1],[[],1],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[5,[2]]],6],[4,3],[4,3],[-1,-1,[]],[-1,-1,[]],[7,[[5,[8,9]]]],[7,[[5,[8,9]]]],[-1,-1,[]],[[[11,[10]]],12],[[],[[14,[13]]]],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[15,[3]]]],0,0,[[[16,[[11,[10]]]],[17,[2]]],18],0,[-1,-2,[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[[8,7],[[5,[3,9]]]],[[8,7],[[5,[3,9]]]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Command",47],[5,"RawRequest",0],[1,"tuple"],[1,"usize"],[6,"Result",48],[10,"Deserializer",49],[5,"ArgMatches",50],[5,"Args",0],[8,"Error",51],[5,"MistralRs",52],[5,"Arc",53],[5,"Router",54],[5,"Id",55],[6,"Option",56],[8,"Result",57],[5,"State",58],[5,"Json",59],[5,"String",60],[5,"TypeId",61]],"b":[]}],\
["mistralrs_core",{"doc":"","t":"PPPPPKFFFPFGFGGMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQQNMNNNNNNNNNNNNNNNNNNNQNQQNNNNNNNNNNNNNNNNNNONNNNOOOOOOONNOOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNN","n":["CacheToken","Done","EnvVar","Error","Fixed","Loader","MistralLoader","MistralRs","MistralSpecificConfig","Path","Request","Response","SamplingParams","SchedulerMethod","TokenSource","_setup_model","_setup_model","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut_refcell","deref_refcell","deserialize","download_model","download_model","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","from","from","get_mut_arcmutex","get_sender","handle_seq_error","handle_seq_error_stateaware","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","load_model","load_model","max_len","maybe_log_request","maybe_log_response","new","new","prompt","repeat_last_n","repeat_penalty","response","sampling_params","stop_toks","temperature","to_owned","to_owned","top_k","top_n_logprobs","top_p","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","use_flash_attn","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"mistralrs_core"],[148,"candle_core::dtype"],[149,"core::option"],[150,"candle_core::device"],[151,"std::sync::mutex"],[152,"alloc::boxed"],[153,"anyhow"],[154,"core::result"],[155,"serde::de"],[156,"alloc::string"],[157,"core::fmt"],[158,"core::fmt"],[159,"alloc::sync"],[160,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If <code>revision</code> is None, then it defaults to <code>main</code>. If <code>dtype</code> is …","If <code>revision</code> is None, then it defaults to <code>main</code>. If <code>dtype</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[16,27,16,27,24,0,0,0,0,16,0,0,0,0,0,1,8,8,16,17,27,24,20,9,10,8,16,17,27,24,20,9,10,9,10,9,10,8,16,17,27,24,20,9,10,8,16,17,27,24,20,9,10,0,0,10,1,8,8,16,17,27,24,20,9,10,17,10,8,16,17,27,24,20,9,10,0,20,0,0,8,16,17,27,24,20,9,10,8,16,17,27,24,20,9,10,1,1,10,20,20,8,20,17,9,10,17,17,10,10,9,10,10,10,10,8,16,17,27,24,20,9,10,8,16,17,27,24,20,9,10,8,16,17,27,24,20,9,10,9,8,16,17,27,24,20,9,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[10,10],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],[12,-1,[]],0,0,[-1,[[13,[10]]],14],[[1,[3,[15]],16],[[7,[[6,[0]]]]]],[[8,[3,[15]],16],[[7,[[6,[0]]]]]],[12,11],[12,11],[12,11],[12,11],[12,11],[12,11],[12,11],[12,11],[[17,18],19],[[10,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[20,[[21,[17]]]],0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[3,[15]],16,[3,[2]],4],[[7,[[6,[[5,[0]]]]]]]],[[1,[3,[15]],16,[3,[2]],4],[[7,[[6,[[5,[0]]]]]]]],0,[[[22,[20]],17],11],[[[22,[20]],[11,[0,23]]],11],[[15,9,[3,[2]],[3,[15]],[3,[15]]],8],[[[6,[[5,[0]]]],24,25],[[22,[20]]]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[-1,26,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[10,"Loader",0],[6,"DType",148],[6,"Option",149],[6,"Device",150],[5,"Mutex",151],[5,"Box",152],[8,"Result",153],[5,"MistralLoader",0],[5,"MistralSpecificConfig",0],[5,"SamplingParams",0],[1,"tuple"],[1,"usize"],[6,"Result",154],[10,"Deserializer",155],[5,"String",156],[6,"TokenSource",0],[5,"Request",0],[5,"Formatter",157],[8,"Result",157],[5,"MistralRs",0],[5,"Sender",158],[5,"Arc",159],[1,"str"],[6,"SchedulerMethod",0],[1,"bool"],[5,"TypeId",160],[6,"Response",0]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
